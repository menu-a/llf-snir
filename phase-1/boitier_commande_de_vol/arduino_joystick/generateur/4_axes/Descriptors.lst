   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  11               	.global	CALLBACK_USB_GetDescriptor
  13               	CALLBACK_USB_GetDescriptor:
  14               	.LFB66:
  15               		.file 1 "Descriptors.c"
   1:Descriptors.c **** #include "Descriptors.h"
   2:Descriptors.c **** 
   3:Descriptors.c **** /** HID class report descriptor. This is a special descriptor constructed with values from the
   4:Descriptors.c ****  *  USBIF HID class specification to describe the reports and capabilities of the HID device. This
   5:Descriptors.c ****  *  descriptor is parsed by the host and its contents used to determine what data (and in what enco
   6:Descriptors.c ****  *  the device will send, and what it may be sent back from the host. Refer to the HID specificatio
   7:Descriptors.c ****  *  more details on HID report descriptors.
   8:Descriptors.c ****  */
   9:Descriptors.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM JoystickReport[] =
  10:Descriptors.c **** {
  11:Descriptors.c **** 	0x05, 0x01,          /* Usage Page (Generic Desktop)                       */
  12:Descriptors.c **** 	0x09, 0x04,          /* Usage (Joystick)                                   */
  13:Descriptors.c **** 
  14:Descriptors.c **** 	/* 8 axes, signed 16 bit resolution, range -32768 to 32767 (16 bytes) */
  15:Descriptors.c **** 	0xa1, 0x00,          /*   Collection (Physical)                            */
  16:Descriptors.c **** 	0x05, 0x01,          /*     Usage Page (Generic Desktop)                   */
  17:Descriptors.c **** 	0x09, 0x30,          /*     Usage (Analog0)                                */
  18:Descriptors.c **** 	0x09, 0x31,          /*     Usage (Analog1)                                */
  19:Descriptors.c **** 	0x09, 0x32,          /*     Usage (Analog1)                                */
  20:Descriptors.c **** 	0x09, 0x33,          /*     Usage (Analog1)                                */
  21:Descriptors.c **** 	0x16, 0x00, 0x80,    /*     Logical Minimum (-32768)                       */
  22:Descriptors.c **** 	0x26, 0xff, 0x7f,    /*     Logical Maximum (32767)                        */
  23:Descriptors.c **** 	0x75, 16,            /*     Report Size (16)                               */
  24:Descriptors.c **** 	0x95, 4,             /*     Report Count (4)                               */
  25:Descriptors.c **** 	0x81, 0x82,          /*     Input (Data, Variable, Absolute, Volatile)     */
  26:Descriptors.c **** 	0xc0                /*   End Collection                                   */
  27:Descriptors.c **** 
  28:Descriptors.c **** };
  29:Descriptors.c **** 
  30:Descriptors.c **** /** Device descriptor structure. This descriptor, located in FLASH memory, describes the overall
  31:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  32:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  33:Descriptors.c ****  *  process begins.
  34:Descriptors.c ****  */
  35:Descriptors.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
  36:Descriptors.c **** {
  37:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  38:Descriptors.c **** 		
  39:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  40:Descriptors.c **** 	.Class                  = 0x00,
  41:Descriptors.c **** 	.SubClass               = 0x00,
  42:Descriptors.c **** 	.Protocol               = 0x00,
  43:Descriptors.c **** 	
  44:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  45:Descriptors.c **** 		
  46:Descriptors.c **** 	.VendorID               = 0x03EB,
  47:Descriptors.c **** 	.ProductID              = 0x2043,
  48:Descriptors.c **** 	.ReleaseNumber          = 0x0000,
  49:Descriptors.c **** 		
  50:Descriptors.c **** 	.ManufacturerStrIndex   = 0x01,
  51:Descriptors.c **** 	.ProductStrIndex        = 0x02,
  52:Descriptors.c **** 	.SerialNumStrIndex      = NO_DESCRIPTOR,
  53:Descriptors.c **** 		
  54:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
  55:Descriptors.c **** };
  56:Descriptors.c **** 
  57:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in FLASH memory, describes the usa
  58:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
  59:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
  60:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
  61:Descriptors.c ****  */
  62:Descriptors.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
  63:Descriptors.c **** {
  64:Descriptors.c **** 	.Config = 
  65:Descriptors.c **** 		{
  66:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
  67:Descriptors.c **** 
  68:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
  69:Descriptors.c **** 			.TotalInterfaces        = 1,
  70:Descriptors.c **** 				
  71:Descriptors.c **** 			.ConfigurationNumber    = 1,
  72:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
  73:Descriptors.c **** 				
  74:Descriptors.c **** 			.ConfigAttributes       = (USB_CONFIG_ATTR_BUSPOWERED | USB_CONFIG_ATTR_SELFPOWERED),
  75:Descriptors.c **** 			
  76:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
  77:Descriptors.c **** 		},
  78:Descriptors.c **** 		
  79:Descriptors.c **** 	.HID_Interface = 
  80:Descriptors.c **** 		{
  81:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
  82:Descriptors.c **** 
  83:Descriptors.c **** 			.InterfaceNumber        = 0x00,
  84:Descriptors.c **** 			.AlternateSetting       = 0x00,
  85:Descriptors.c **** 			
  86:Descriptors.c **** 			.TotalEndpoints         = 1,
  87:Descriptors.c **** 				
  88:Descriptors.c **** 			.Class                  = 0x03,
  89:Descriptors.c **** 			.SubClass               = 0x00,
  90:Descriptors.c **** 			.Protocol               = HID_NON_BOOT_PROTOCOL,
  91:Descriptors.c **** 				
  92:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
  93:Descriptors.c **** 		},
  94:Descriptors.c **** 
  95:Descriptors.c **** 	.HID_JoystickHID = 
  96:Descriptors.c **** 		{
  97:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_HID_Descriptor_t), .Type = DTYPE_HID},
  98:Descriptors.c **** 			
  99:Descriptors.c **** 			.HIDSpec                = VERSION_BCD(01.11),
 100:Descriptors.c **** 			.CountryCode            = 0x00,
 101:Descriptors.c **** 			.TotalReportDescriptors = 1,
 102:Descriptors.c **** 			.HIDReportType          = DTYPE_Report,
 103:Descriptors.c **** 			.HIDReportLength        = sizeof(JoystickReport)
 104:Descriptors.c **** 		},
 105:Descriptors.c **** 
 106:Descriptors.c **** 	.HID_ReportINEndpoint = 
 107:Descriptors.c **** 		{
 108:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 109:Descriptors.c **** 			
 110:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | JOYSTICK_EPNUM),
 111:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 112:Descriptors.c **** 			.EndpointSize           = JOYSTICK_EPSIZE,
 113:Descriptors.c **** 			.PollingIntervalMS      = 0x0A
 114:Descriptors.c **** 		}	
 115:Descriptors.c **** };
 116:Descriptors.c **** 
 117:Descriptors.c **** /** Language descriptor structure. This descriptor, located in FLASH memory, is returned when the h
 118:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 119:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 120:Descriptors.c ****  */
 121:Descriptors.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 122:Descriptors.c **** {
 123:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 124:Descriptors.c **** 		
 125:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 126:Descriptors.c **** };
 127:Descriptors.c **** 
 128:Descriptors.c **** /** Manufacturer descriptor string. This is a Unicode string containing the manufacturer's details 
 129:Descriptors.c ****  *  form, and is read out upon request by the host when the appropriate string ID is requested, lis
 130:Descriptors.c ****  *  Descriptor.
 131:Descriptors.c ****  */
 132:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 133:Descriptors.c **** {
 134:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(7), .Type = DTYPE_String},
 135:Descriptors.c **** 		
 136:Descriptors.c **** 	.UnicodeString          = L"Arduino"
 137:Descriptors.c **** };
 138:Descriptors.c **** 
 139:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 140:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 141:Descriptors.c ****  *  Descriptor.
 142:Descriptors.c ****  */
 143:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 144:Descriptors.c **** {
 145:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(16), .Type = DTYPE_String},
 146:Descriptors.c **** 		
 147:Descriptors.c **** 	.UnicodeString          = L"Joystick-simulateur"
 148:Descriptors.c **** };
 149:Descriptors.c **** 
 150:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 151:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 152:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 153:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 154:Descriptors.c ****  *  USB host.
 155:Descriptors.c ****  */
 156:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 157:Descriptors.c ****                                     const uint8_t wIndex,
 158:Descriptors.c ****                                     void** const DescriptorAddress)
 159:Descriptors.c **** {
  16               		.loc 1 159 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 160:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
  23               		.loc 1 160 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
 161:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 162:Descriptors.c **** 
 163:Descriptors.c **** 	void*    Address = NULL;
 164:Descriptors.c **** 	uint16_t Size    = NO_DESCRIPTOR;
 165:Descriptors.c **** 
 166:Descriptors.c **** 	switch (DescriptorType)
  26               		.loc 1 166 0
  27 0004 2330      		cpi r18,3
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 04F4      		brge .L4
  31 000c 2130      		cpi r18,1
  32 000e 3105      		cpc r19,__zero_reg__
  33 0010 01F0      		breq .L12
  34 0012 2230      		cpi r18,2
  35 0014 3105      		cpc r19,__zero_reg__
  36 0016 01F4      		brne .L14
  37               	.LVL1:
 167:Descriptors.c **** 	{
 168:Descriptors.c **** 		case DTYPE_Device:
 169:Descriptors.c **** 			Address = (void*)&DeviceDescriptor;
 170:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
 171:Descriptors.c **** 			break;
 172:Descriptors.c **** 		case DTYPE_Configuration: 
 173:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor;
 174:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  38               		.loc 1 174 0
  39 0018 82E2      		ldi r24,lo8(34)
  40 001a 90E0      		ldi r25,0
  41               	.LVL2:
 173:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  42               		.loc 1 173 0
  43 001c 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  44 001e 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 175:Descriptors.c **** 			break;
  45               		.loc 1 175 0
  46 0020 00C0      		rjmp .L5
  47               	.LVL3:
  48               	.L4:
 166:Descriptors.c **** 	{
  49               		.loc 1 166 0
  50 0022 2132      		cpi r18,33
  51 0024 3105      		cpc r19,__zero_reg__
  52 0026 01F0      		breq .L7
  53 0028 2232      		cpi r18,34
  54 002a 3105      		cpc r19,__zero_reg__
  55 002c 01F4      		brne .L14
  56               	.LVL4:
 176:Descriptors.c **** 		case DTYPE_String: 
 177:Descriptors.c **** 			switch (DescriptorNumber)
 178:Descriptors.c **** 			{
 179:Descriptors.c **** 				case 0x00: 
 180:Descriptors.c **** 					Address = (void*)&LanguageString;
 181:Descriptors.c **** 					Size    = pgm_read_byte(&LanguageString.Header.Size);
 182:Descriptors.c **** 					break;
 183:Descriptors.c **** 				case 0x01: 
 184:Descriptors.c **** 					Address = (void*)&ManufacturerString;
 185:Descriptors.c **** 					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 186:Descriptors.c **** 					break;
 187:Descriptors.c **** 				case 0x02: 
 188:Descriptors.c **** 					Address = (void*)&ProductString;
 189:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
 190:Descriptors.c **** 					break;
 191:Descriptors.c **** 			}
 192:Descriptors.c **** 			
 193:Descriptors.c **** 			break;
 194:Descriptors.c **** 		case DTYPE_HID: 
 195:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor.HID_JoystickHID;
 196:Descriptors.c **** 			Size    = sizeof(USB_HID_Descriptor_t);
 197:Descriptors.c **** 			break;
 198:Descriptors.c **** 		case DTYPE_Report: 
 199:Descriptors.c **** 			Address = (void*)&JoystickReport;
 200:Descriptors.c **** 			Size    = sizeof(JoystickReport);
  57               		.loc 1 200 0
  58 002e 8DE1      		ldi r24,lo8(29)
  59 0030 90E0      		ldi r25,0
  60               	.LVL5:
 199:Descriptors.c **** 			Size    = sizeof(JoystickReport);
  61               		.loc 1 199 0
  62 0032 20E0      		ldi r18,lo8(JoystickReport)
  63 0034 30E0      		ldi r19,hi8(JoystickReport)
 201:Descriptors.c **** 			break;
  64               		.loc 1 201 0
  65 0036 00C0      		rjmp .L5
  66               	.LVL6:
  67               	.L3:
  68 0038 9927      		clr r25
  69               	.LVL7:
 177:Descriptors.c **** 			{
  70               		.loc 1 177 0
  71 003a 8130      		cpi r24,1
  72 003c 9105      		cpc r25,__zero_reg__
  73 003e 01F0      		breq .L9
  74 0040 8230      		cpi r24,2
  75 0042 9105      		cpc r25,__zero_reg__
  76 0044 01F0      		breq .L10
  77 0046 892B      		or r24,r25
  78 0048 01F4      		brne .L14
  79               	.LVL8:
  80               	.LBB2:
 181:Descriptors.c **** 					break;
  81               		.loc 1 181 0
  82 004a E0E0      		ldi r30,lo8(LanguageString)
  83 004c F0E0      		ldi r31,hi8(LanguageString)
  84 004e 00C0      		rjmp .L15
  85               	.LVL9:
  86               	.L9:
  87               	.LBE2:
  88               	.LBB3:
 185:Descriptors.c **** 					break;
  89               		.loc 1 185 0
  90 0050 E0E0      		ldi r30,lo8(ManufacturerString)
  91 0052 F0E0      		ldi r31,hi8(ManufacturerString)
  92 0054 00C0      		rjmp .L15
  93               	.LVL10:
  94               	.L10:
  95               	.LBE3:
  96               	.LBB4:
 189:Descriptors.c **** 					break;
  97               		.loc 1 189 0
  98 0056 E0E0      		ldi r30,lo8(ProductString)
  99 0058 F0E0      		ldi r31,hi8(ProductString)
 100               	.LVL11:
 101               	.L15:
 102               	/* #APP */
 103               	 ;  189 "Descriptors.c" 1
 104 005a 8491      		lpm r24, Z
 105               		
 106               	 ;  0 "" 2
 107               	.LVL12:
 108               	/* #NOAPP */
 109               	.LBE4:
 110 005c 90E0      		ldi r25,0
 111               	.LVL13:
 188:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
 112               		.loc 1 188 0
 113 005e 9F01      		movw r18,r30
 190:Descriptors.c **** 			}
 114               		.loc 1 190 0
 115 0060 00C0      		rjmp .L5
 116               	.LVL14:
 117               	.L7:
 196:Descriptors.c **** 			break;
 118               		.loc 1 196 0
 119 0062 89E0      		ldi r24,lo8(9)
 120 0064 90E0      		ldi r25,0
 121               	.LVL15:
 195:Descriptors.c **** 			Size    = sizeof(USB_HID_Descriptor_t);
 122               		.loc 1 195 0
 123 0066 20E0      		ldi r18,lo8(ConfigurationDescriptor+18)
 124 0068 30E0      		ldi r19,hi8(ConfigurationDescriptor+18)
 125               	.LVL16:
 197:Descriptors.c **** 		case DTYPE_Report: 
 126               		.loc 1 197 0
 127 006a 00C0      		rjmp .L5
 128               	.LVL17:
 129               	.L12:
 170:Descriptors.c **** 			break;
 130               		.loc 1 170 0
 131 006c 82E1      		ldi r24,lo8(18)
 132 006e 90E0      		ldi r25,0
 133               	.LVL18:
 169:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
 134               		.loc 1 169 0
 135 0070 20E0      		ldi r18,lo8(DeviceDescriptor)
 136 0072 30E0      		ldi r19,hi8(DeviceDescriptor)
 137 0074 00C0      		rjmp .L5
 138               	.L14:
 164:Descriptors.c **** 
 139               		.loc 1 164 0
 140 0076 80E0      		ldi r24,0
 141 0078 90E0      		ldi r25,0
 163:Descriptors.c **** 	uint16_t Size    = NO_DESCRIPTOR;
 142               		.loc 1 163 0
 143 007a 20E0      		ldi r18,0
 144 007c 30E0      		ldi r19,0
 145               	.LVL19:
 146               	.L5:
 202:Descriptors.c **** 	}
 203:Descriptors.c **** 	
 204:Descriptors.c **** 	*DescriptorAddress = Address;
 147               		.loc 1 204 0
 148 007e FA01      		movw r30,r20
 149 0080 3183      		std Z+1,r19
 150 0082 2083      		st Z,r18
 205:Descriptors.c **** 	return Size;
 206:Descriptors.c **** }
 151               		.loc 1 206 0
 152 0084 0895      		ret
 153               		.cfi_endproc
 154               	.LFE66:
 156               	.global	ProductString
 157               		.section	.progmem.data,"a",@progbits
 160               	ProductString:
 161 0000 22        		.byte	34
 162 0001 03        		.byte	3
 163 0002 4A00      		.string	"J"
 164 0004 6F00      		.string	"o"
 165 0006 7900      		.string	"y"
 166 0008 7300      		.string	"s"
 167 000a 7400      		.string	"t"
 168 000c 6900      		.string	"i"
 169 000e 6300      		.string	"c"
 170 0010 6B00      		.string	"k"
 171 0012 2D00      		.string	"-"
 172 0014 7300      		.string	"s"
 173 0016 6900      		.string	"i"
 174 0018 6D00      		.string	"m"
 175 001a 7500      		.string	"u"
 176 001c 6C00      		.string	"l"
 177 001e 6100      		.string	"a"
 178 0020 7400      		.string	"t"
 179 0022 6500      		.string	"e"
 180 0024 7500      		.string	"u"
 181 0026 7200      		.string	"r"
 182 0028 00        		.string	""
 183 0029 00        		.string	""
 184               	.global	ManufacturerString
 187               	ManufacturerString:
 188 002a 10        		.byte	16
 189 002b 03        		.byte	3
 190 002c 4100      		.string	"A"
 191 002e 7200      		.string	"r"
 192 0030 6400      		.string	"d"
 193 0032 7500      		.string	"u"
 194 0034 6900      		.string	"i"
 195 0036 6E00      		.string	"n"
 196 0038 6F00      		.string	"o"
 197 003a 00        		.string	""
 198 003b 00        		.string	""
 199               	.global	LanguageString
 202               	LanguageString:
 203 003c 04        		.byte	4
 204 003d 03        		.byte	3
 205 003e 0904      		.word	1033
 206               	.global	ConfigurationDescriptor
 209               	ConfigurationDescriptor:
 210 0040 09        		.byte	9
 211 0041 02        		.byte	2
 212 0042 2200      		.word	34
 213 0044 01        		.byte	1
 214 0045 01        		.byte	1
 215 0046 00        		.byte	0
 216 0047 C0        		.byte	-64
 217 0048 32        		.byte	50
 218 0049 09        		.byte	9
 219 004a 04        		.byte	4
 220 004b 00        		.byte	0
 221 004c 00        		.byte	0
 222 004d 01        		.byte	1
 223 004e 03        		.byte	3
 224 004f 00        		.byte	0
 225 0050 00        		.byte	0
 226 0051 00        		.byte	0
 227 0052 09        		.byte	9
 228 0053 21        		.byte	33
 229 0054 1101      		.word	273
 230 0056 00        		.byte	0
 231 0057 01        		.byte	1
 232 0058 22        		.byte	34
 233 0059 1D00      		.word	29
 234 005b 07        		.byte	7
 235 005c 05        		.byte	5
 236 005d 81        		.byte	-127
 237 005e 03        		.byte	3
 238 005f 0800      		.word	8
 239 0061 0A        		.byte	10
 240               	.global	DeviceDescriptor
 243               	DeviceDescriptor:
 244 0062 12        		.byte	18
 245 0063 01        		.byte	1
 246 0064 1001      		.word	272
 247 0066 00        		.byte	0
 248 0067 00        		.byte	0
 249 0068 00        		.byte	0
 250 0069 08        		.byte	8
 251 006a EB03      		.word	1003
 252 006c 4320      		.word	8259
 253 006e 0000      		.word	0
 254 0070 01        		.byte	1
 255 0071 02        		.byte	2
 256 0072 00        		.byte	0
 257 0073 01        		.byte	1
 258               	.global	JoystickReport
 261               	JoystickReport:
 262 0074 05        		.byte	5
 263 0075 01        		.byte	1
 264 0076 09        		.byte	9
 265 0077 04        		.byte	4
 266 0078 A1        		.byte	-95
 267 0079 00        		.byte	0
 268 007a 05        		.byte	5
 269 007b 01        		.byte	1
 270 007c 09        		.byte	9
 271 007d 30        		.byte	48
 272 007e 09        		.byte	9
 273 007f 31        		.byte	49
 274 0080 09        		.byte	9
 275 0081 32        		.byte	50
 276 0082 09        		.byte	9
 277 0083 33        		.byte	51
 278 0084 16        		.byte	22
 279 0085 00        		.byte	0
 280 0086 80        		.byte	-128
 281 0087 26        		.byte	38
 282 0088 FF        		.byte	-1
 283 0089 7F        		.byte	127
 284 008a 75        		.byte	117
 285 008b 10        		.byte	16
 286 008c 95        		.byte	-107
 287 008d 04        		.byte	4
 288 008e 81        		.byte	-127
 289 008f 82        		.byte	-126
 290 0090 C0        		.byte	-64
 291               		.text
 292               	.Letext0:
 293               		.file 2 "/usr/lib/avr/include/stdint.h"
 294               		.file 3 "/usr/lib/gcc/avr/4.8.1/include/stddef.h"
 295               		.file 4 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdDescriptors.h"
 296               		.file 5 "../../LUFA/Drivers/USB/Class/Device/../Common/HID.h"
 297               		.file 6 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Descriptors.c
     /tmp/cc2eY1Hb.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc2eY1Hb.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc2eY1Hb.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc2eY1Hb.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc2eY1Hb.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc2eY1Hb.s:13     .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor
     /tmp/cc2eY1Hb.s:209    .progmem.data:0000000000000040 ConfigurationDescriptor
     /tmp/cc2eY1Hb.s:261    .progmem.data:0000000000000074 JoystickReport
     /tmp/cc2eY1Hb.s:202    .progmem.data:000000000000003c LanguageString
     /tmp/cc2eY1Hb.s:187    .progmem.data:000000000000002a ManufacturerString
     /tmp/cc2eY1Hb.s:160    .progmem.data:0000000000000000 ProductString
     /tmp/cc2eY1Hb.s:243    .progmem.data:0000000000000062 DeviceDescriptor

NO UNDEFINED SYMBOLS
